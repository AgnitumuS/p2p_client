#include "async_db.h"
#ifdef WIN32
#include <Windows.h>
#else
#include <unistd.h>
#endif
#include <mysql.h>
#include <string.h>
#include <stdlib.h>
#include <pthread.h>
#include <semaphore.h>
#include "log.h"
#include "inifile.h"
#include "gss_setting.h"
#include "gss_mem.h"
#include "gss_common.h"


struct async_sql
{
	char* sql;
	struct async_sql* next;
};

typedef struct async_db
{
	pthread_t* threads;

	struct async_sql* first_sql;
	struct async_sql* last_sql;

	unsigned char db_thread_run;

	pthread_mutex_t mysql_mutex;//multi-thread mysql_real_connect/mysql_init must lock

	pthread_mutex_t sql_mutex;
	sem_t sql_sem;

}async_db;

async_db g_async_db = {NULL, NULL, NULL, 0};

#define DEFAULT_MYSQL_PORT 3306
MYSQL* get_mydb_connection(MYSQL *mydbconnection)
{
	int count;
	int i;
	if(mydbconnection)
	{
		if(mysql_ping(mydbconnection))
			mysql_close(mydbconnection);
		else
			return mydbconnection;
	}

	count = read_profile_int("db", "count", 0, get_gss_setting()->ini_file_name);
	//multi-thread mysql_real_connect/mysql_init must lock
	pthread_mutex_lock(&g_async_db.mysql_mutex);
	for(i=0; i<count; i++)
	{
		char host[128];
		char user[64];
		char password[64];
		char dbname[64];
		int port;
		char db_section[32];
		MYSQL *conn;

		sprintf(db_section, "db%d", i+1);

		read_profile_string(db_section, "host", "127.0.0.1", host, sizeof(host), get_gss_setting()->ini_file_name);
		read_profile_string(db_section, "user", "root", user, sizeof(user), get_gss_setting()->ini_file_name);
		read_profile_string(db_section, "password", "", password, sizeof(password), get_gss_setting()->ini_file_name);
		read_profile_string(db_section, "dbname", "", dbname, sizeof(dbname), get_gss_setting()->ini_file_name);
		port = read_profile_int(db_section, "port", DEFAULT_MYSQL_PORT, get_gss_setting()->ini_file_name);

		mydbconnection = mysql_init(NULL);
		conn = mysql_real_connect(mydbconnection, host, user, password, dbname, port, NULL, CLIENT_IGNORE_SIGPIPE);
		if(!conn)
		{
			LOG(LOG_LEVEL_ERROR, "Cannot connection: host=%s user=%s password=%s dbname=%s port=%d", host ,user, password,dbname,port);
			mysql_close(mydbconnection);
			continue;
		} 
		else if(mysql_select_db(mydbconnection, dbname))
		{
			LOG(LOG_LEVEL_ERROR, "Cannot connect to MySQL DB: %s", dbname);
			mysql_close(mydbconnection);
			continue;
		}
		LOG(LOG_LEVEL_INFO, "connection mysql ok: host=%s user=%s password=%s dbname=%s port=%d", host ,user, password,dbname,port);
		pthread_mutex_unlock(&g_async_db.mysql_mutex);
		return mydbconnection; //connect mysql ok
	}
	pthread_mutex_unlock(&g_async_db.mysql_mutex);
	return NULL;
}

static void* async_db_thread(void *arg)
{
	MYSQL* myconn = 0; //per thread use a mysql connection

	GSS_UNUSED_ARG(arg);

	myconn = get_mydb_connection(myconn);

	while(g_async_db.db_thread_run)
	{
		struct async_sql* asql = 0;
		
		sem_wait(&g_async_db.sql_sem);

		//get sql
		pthread_mutex_lock(&g_async_db.sql_mutex);

		asql = g_async_db.first_sql;
		if(asql)
		{
			g_async_db.first_sql = g_async_db.first_sql->next;
			if(g_async_db.first_sql == 0)
				g_async_db.last_sql = 0;
		}
		
		pthread_mutex_unlock(&g_async_db.sql_mutex);

		//run sql 
		if(asql)
		{
			while(g_async_db.db_thread_run)
			{
				myconn = get_mydb_connection(myconn);

				if(myconn)
					break;

				usleep(1000 * 1000); //one second
			}
			mysql_real_query(myconn, asql->sql, strlen(asql->sql));
			gss_free(asql->sql);
			gss_free(asql);
		}
	}
	return 0;
}

void async_db_init(void)
{
	unsigned int i=0;

	g_async_db.first_sql = 0;
	g_async_db.last_sql = 0;
	g_async_db.db_thread_run = 0;
	
	pthread_mutex_init(&g_async_db.mysql_mutex, NULL);
	pthread_mutex_init(&g_async_db.sql_mutex, NULL);
	sem_init(&g_async_db.sql_sem, 0, 0);

	g_async_db.db_thread_run = 1;
		
	g_async_db.threads = (pthread_t*)gss_malloc(sizeof(pthread_t) * get_gss_setting()->async_db_thread_count);
	for(i=0; i<get_gss_setting()->async_db_thread_count; i++)
		pthread_create(&g_async_db.threads[i], 0, async_db_thread, 0);
}

void async_db_uninit(void)
{
	unsigned int i=0;
	struct async_sql* asql = 0;

	if(g_async_db.db_thread_run == 1)
	{
		g_async_db.db_thread_run = 0;

		sem_post(&g_async_db.sql_sem); //wake up db thread

		for(i=0; i<get_gss_setting()->async_db_thread_count; i++)
		{
			pthread_join(g_async_db.threads[i], 0);
		}
	}
	else
		return;

	sem_destroy(&g_async_db.sql_sem);
	pthread_mutex_destroy(&g_async_db.sql_mutex);
	pthread_mutex_destroy(&g_async_db.mysql_mutex);

	asql = g_async_db.first_sql;
	while(asql)
	{
		struct async_sql* next = asql->next;
		gss_free(asql->sql);
		gss_free(asql);
		asql = next;
	}

	gss_free(g_async_db.threads);
}

//cache sql and signal async database thread
void async_db_sql(const char* sql)
{
	struct async_sql* asql;

	if(g_async_db.db_thread_run == 0)
		return;
	asql = (struct async_sql*)gss_malloc(sizeof(struct async_sql));
	asql->next = 0;
	asql->sql = (char*)gss_malloc(strlen(sql)+1);
	strcpy(asql->sql, sql);
	pthread_mutex_lock(&g_async_db.sql_mutex);
	if(g_async_db.last_sql == 0)
	{
		g_async_db.first_sql = asql;
		g_async_db.last_sql = asql;
	}
	else
	{
		g_async_db.last_sql->next = asql;
		g_async_db.last_sql = asql;
	}
	pthread_mutex_unlock(&g_async_db.sql_mutex);

	sem_post(&g_async_db.sql_sem); //wake up db thread
}

void async_db_main_conn_shutdown(const char* user)
{
	char sql[256];
	sprintf(sql, "update tx_device set GssServer='', GssServerPort=0, GssServerId=0 WHERE GUID ='%s' and GssServerId=%d",
		user,
		get_gss_setting()->server_id);
	async_db_sql(sql);
}

void async_db_main_conn_connected(const char* user)
{
	char sql[256];
	sprintf(sql, 
		"update tx_device set GssServer='%s', GssServerPort=%d, GssServerId=%d WHERE GUID ='%s'", 
		get_gss_setting()->external_ip[0]? get_gss_setting()->external_ip:get_gss_setting()->listen_ip,
		get_gss_setting()->listen_port,
		get_gss_setting()->server_id,
		user);
	async_db_sql(sql);
}
