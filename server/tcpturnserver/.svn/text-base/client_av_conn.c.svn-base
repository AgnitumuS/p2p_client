#include "client_av_conn.h"
#include "tcp_client.h"
#include "dev_main_conn.h"
#include "gss_mem.h"
#include "log.h"
#include "queue.h"
#include "gss_setting.h"
#include "dev_av_conn.h"
#include "flow_stat.h"
#include <time.h>

extern time_t g_now_time;
extern struct event_base* g_ev_base;

extern struct flow_stat g_recv_flow_stat; //statistics receive net flow stat
extern struct flow_stat g_send_flow_stat; //statistics send net flow stat

struct client_av_conn_tailq;

typedef struct client_av_conn
{
	void* tcp_conn;//client tcp connection

	//heart timer event
	struct event* heart_timer; 

	//last receive data time
	time_t last_recv_tm; 

	struct client_av_conn_tailq* tailq;

	struct dev_av_conn* dev_conn; //device av connection

	char uid[MAX_UID_LEN];
}client_av_conn;

typedef struct client_av_conn_tailq 
{
	TAILQ_ENTRY(client_av_conn_tailq) tailq;
	
	unsigned int index; //index in client_av_conn_entries.client_conns

	struct client_av_conn* av_conn; //client av connection
}client_av_conn_tailq;


typedef struct client_av_conns{
	//client av connection array
	client_av_conn_tailq* client_conns;
	
	//client av connection array capacity
	unsigned int client_conns_capacity;

	//free client av connection
	TAILQ_HEAD(free_av_tailq_conns, client_av_conn_tailq) free_client_conns;

	//online client av connection count
	unsigned int online_client_count;
}client_av_conns;

client_av_conns g_client_av_conns = {NULL, 2048, TAILQ_HEAD_INITIALIZER(g_client_av_conns.free_client_conns), 0};

void client_av_conn_entries_init()
{
	unsigned int i;
	client_av_conn_tailq* conn_tailq;

	g_client_av_conns.client_conns_capacity = get_gss_setting()->max_av_conn_count;
	g_client_av_conns.client_conns = (client_av_conn_tailq*)gss_malloc(sizeof(client_av_conn_tailq)*g_client_av_conns.client_conns_capacity);

	TAILQ_INIT(&g_client_av_conns.free_client_conns);

	for(i=0; i<g_client_av_conns.client_conns_capacity; i++)
	{
		conn_tailq = &g_client_av_conns.client_conns[i];
		conn_tailq->index = i;
		conn_tailq->av_conn = NULL;
		TAILQ_INSERT_TAIL(&g_client_av_conns.free_client_conns, conn_tailq, tailq);
	}

	g_client_av_conns.online_client_count = 0;
}

void client_av_conn_entries_uninit()
{
	gss_free(g_client_av_conns.client_conns);
}

//call back receive client av command
static int av_conn_on_recv(void* client, const char* buf, int buf_len)
{
	client_av_conn* conn = (client_av_conn*)tcp_client_user_data(client);
	GSS_DATA_HEADER* header = (GSS_DATA_HEADER*)buf;

	conn->last_recv_tm = g_now_time;

	flow_stat_add(&g_recv_flow_stat, buf_len);

	if(header->cmd == GSS_AV_DATA)//forward data to device av connection
	{
		if(conn->dev_conn)
			dev_av_conn_send(conn->dev_conn, buf, buf_len);
	}
	else if(header->cmd == GSS_HEART_CMD)
	{
		tcp_client_stat_send(conn->tcp_conn, buf, buf_len); //response heart
	}
	return 0;
}

inline void destroy_client_av_conn(client_av_conn* conn)
{
	if(conn->dev_conn)
		dev_av_conn_client_closed(conn->dev_conn);

	destroy_tcp_client(conn->tcp_conn);

	event_free(conn->heart_timer);

	conn->tailq->av_conn = NULL;
	TAILQ_INSERT_TAIL(&g_client_av_conns.free_client_conns, conn->tailq, tailq);

	g_client_av_conns.online_client_count--;

	gss_free(conn);
}

//call back tcp closed
static void av_conn_on_close(void* client)
{
	client_av_conn* conn = (client_av_conn*)tcp_client_user_data(client);
	LOG(LOG_LEVEL_TRACE, "av_conn_on_close %p, uid %s", conn, conn->uid);
	destroy_client_av_conn(conn);
}

static void av_conn_heart_timer(evutil_socket_t fd, short events, void *arg)
{
	client_av_conn* conn = (client_av_conn*)arg;
	if(g_now_time - conn->last_recv_tm >= GSS_HEART_SPAN*2)
	{
		LOG(LOG_LEVEL_TRACE, "av_conn_heart_timer %p", conn); 
		destroy_client_av_conn(conn);
	}
}

inline void client_av_send_connect_result(client_av_conn* av_conn, int result)
{
#define RESULT_CMD_LEN (sizeof(GSS_DATA_HEADER) + sizeof(int))
	char buf[RESULT_CMD_LEN];
	GSS_DATA_HEADER* header = (GSS_DATA_HEADER*)buf;

	header->cmd = GSS_CONNECT_RESULT;
	header->data_seq = LAST_DATA_SEQ;
	header->len = htons(sizeof(int));

	*(int*)(header+1) = htonl(result);

	tcp_client_stat_send(av_conn->tcp_conn, buf, RESULT_CMD_LEN);
}

void on_client_av_connect(void* tcp_client, GSS_DATA_HEADER* cmd_header)
{
	GSS_LOGIN_CMD* cmd = (GSS_LOGIN_CMD*)(cmd_header+1);
	client_av_conn* av_conn ;
	struct timeval tv = {GSS_HEART_SPAN*2, 0}; 
	client_av_conn_tailq* conn_tailq = NULL;
	int result;

	av_conn = (client_av_conn*)gss_malloc(sizeof(client_av_conn));

	av_conn->tcp_conn = tcp_client;

	av_conn->dev_conn = NULL;

	strcpy(av_conn->uid, cmd->uid);

	av_conn->last_recv_tm = g_now_time;
	//add heart timer, libevent common timer
	av_conn->heart_timer = event_new(g_ev_base, -1, EV_TIMEOUT|EV_PERSIST, av_conn_heart_timer, av_conn);
	evtimer_add(av_conn->heart_timer, &tv);

	//change tcp callback function
	tcp_client_set_cb(tcp_client, av_conn_on_recv, av_conn_on_close, av_conn);

	conn_tailq = TAILQ_FIRST(&g_client_av_conns.free_client_conns);
	g_client_av_conns.online_client_count++;

	//too many av connection
	if(g_client_av_conns.online_client_count >= g_client_av_conns.client_conns_capacity || conn_tailq == NULL)
	{
		client_av_send_connect_result(av_conn, GSS_TOO_MANY_CONN);
		LOG(LOG_LEVEL_WARN, "on_client_av_connect online_client_count >= client_conns_capacity"); 
		return;
	}
	
	//remove from free connections
	TAILQ_REMOVE(&g_client_av_conns.free_client_conns, conn_tailq, tailq);
	av_conn->tailq = conn_tailq;
	conn_tailq->av_conn = av_conn;

	//send av connection command to device
	//if long time no response, heart timer will be called, the connection will be destroyed 
	result = main_conn_av_connect(cmd->uid, conn_tailq->index);
	if(result !=0 )
	{
		client_av_send_connect_result(av_conn, result);
		return;
	}

	LOG(LOG_LEVEL_TRACE, "on_client_av_connect,uid %s,conn %p",	cmd->uid, av_conn); 
}

int client_av_conn_dev_connected(const char* uid, unsigned int client_idx, struct dev_av_conn* dev_conn, struct client_av_conn** client_conn)
{
	client_av_conn_tailq* conn_tailq;
	struct client_av_conn* av_conn;

	if(client_idx >= g_client_av_conns.client_conns_capacity)
		return GSS_INVALID_CLINET_INDEX;

	conn_tailq = &g_client_av_conns.client_conns[client_idx];
	av_conn = conn_tailq->av_conn;
	if(!av_conn)
		return GSS_CLIENT_OFFLINE;

	if(strcmp(av_conn->uid, uid))
		return GSS_UID_NO_EQ;

	av_conn->dev_conn = dev_conn;
	*client_conn = av_conn;
	client_av_send_connect_result(av_conn, GSS_NO_ERROR);

	return GSS_NO_ERROR;
}

void client_av_conn_send(struct client_av_conn* av_conn, const char* buf, int buf_len)
{
	if(!av_conn)
		return;
	tcp_client_stat_send(av_conn->tcp_conn, buf, buf_len);
}

void client_av_conn_dev_closed(struct client_av_conn* av_conn)
{
	GSS_DATA_HEADER header;

	av_conn->dev_conn = NULL;

	header.cmd = GSS_AV_DISCONNECTED;
	header.data_seq = LAST_DATA_SEQ;
	header.len = 0;
	tcp_client_stat_send(av_conn->tcp_conn, (const char*)&header, sizeof(GSS_DATA_HEADER));
}

void get_av_conn_count(unsigned int* av_count)
{
	*av_count = g_client_av_conns.online_client_count;
}