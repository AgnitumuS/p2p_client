#include "dev_av_conn.h"
#include <time.h>
#include "client_av_conn.h"
#include "tcp_client.h"
#include "gss_mem.h"
#include "log.h"
#include "gss_setting.h"
#include "flow_stat.h"

extern time_t g_now_time;
extern struct event_base* g_ev_base;
extern struct flow_stat g_recv_flow_stat; //statistics receive net flow stat
extern struct flow_stat g_send_flow_stat; //statistics send net flow stat

typedef struct dev_av_conn
{
	void* tcp_conn;//device tcp connection

	//heart timer event
	struct event* heart_timer; 

	//last receive data time
	time_t last_recv_tm; 

	struct client_av_conn* client_conn; //client av connection

	char uid[MAX_UID_LEN];
}dev_av_conn;

void dev_av_conn_send(struct dev_av_conn* av_conn, const char* buf, int buf_len)
{
	if(!av_conn)
		return;
	tcp_client_stat_send(av_conn->tcp_conn, buf, buf_len);
}

void dev_av_conn_client_closed(struct dev_av_conn* av_conn)
{
	GSS_DATA_HEADER header;

	av_conn->client_conn = NULL;

	header.cmd = GSS_AV_DISCONNECTED;
	header.data_seq = LAST_DATA_SEQ;
	header.len = 0;
	tcp_client_stat_send(av_conn->tcp_conn, (const char*)&header, sizeof(GSS_DATA_HEADER));
}

inline void destroy_dev_av_conn(dev_av_conn* conn)
{
	if(conn->client_conn)
		client_av_conn_dev_closed(conn->client_conn);

	destroy_tcp_client(conn->tcp_conn);

	event_free(conn->heart_timer);

	gss_free(conn);
}

//call back tcp closed
static void dev_av_conn_on_close(void* client)
{
	dev_av_conn* conn = (dev_av_conn*)tcp_client_user_data(client);
	LOG(LOG_LEVEL_TRACE, "dev_av_conn_on_close %p, uid %s", conn, conn->uid); 
	destroy_dev_av_conn(conn);
}

static void dev_av_conn_heart_timer(evutil_socket_t fd, short events, void *arg)
{
	dev_av_conn* conn = (dev_av_conn*)arg;
	if(g_now_time - conn->last_recv_tm >= GSS_HEART_SPAN*2)
	{
		LOG(LOG_LEVEL_TRACE, "dev_av_conn_heart_timer %p", conn); 
		destroy_dev_av_conn(conn);
	}
}

//call back receive client av command
static int dev_av_conn_on_recv(void* client, const char* buf, int buf_len)
{
	dev_av_conn* conn = (dev_av_conn*)tcp_client_user_data(client);
	GSS_DATA_HEADER* header = (GSS_DATA_HEADER*)buf;

	conn->last_recv_tm = g_now_time;
	flow_stat_add(&g_recv_flow_stat, buf_len);

	if(header->cmd == GSS_AV_DATA)//forward data to client av connection
	{
		if(conn->client_conn)
			client_av_conn_send(conn->client_conn, buf, buf_len);
	}
	else if(header->cmd == GSS_HEART_CMD)
	{
		tcp_client_stat_send(conn->tcp_conn, buf, buf_len); //response heart
	}
	return 0;
}

inline void dev_av_send_connect_result(dev_av_conn* av_conn, int result)
{
#define RESULT_CMD_LEN (sizeof(GSS_DATA_HEADER) + sizeof(int))
	char buf[RESULT_CMD_LEN];
	GSS_DATA_HEADER* header = (GSS_DATA_HEADER*)buf;

	header->cmd = GSS_CONNECT_RESULT;
	header->data_seq = LAST_DATA_SEQ;
	header->len = htons(sizeof(int));

	*(int*)(header+1) = htonl(result);

	tcp_client_stat_send(av_conn->tcp_conn, buf, RESULT_CMD_LEN);
}

static void dev_av_set_sock_opt(dev_av_conn* dev_av)
{
	evutil_socket_t sock = tcp_client_get_handle(dev_av->tcp_conn);
	int socket_buffer_size = get_gss_setting()->so_recvbuf;

	// socket receive buffer, system will double it.
	int nb_rbuf = socket_buffer_size / 2;

	int onb_rbuf = 0;
#ifdef WIN32
	int sock_buf_size = sizeof(int);
#else
	socklen_t sock_buf_size = sizeof(int);
#endif

	if(get_gss_setting()->so_recvbuf < 0)
		return;

	getsockopt(sock, SOL_SOCKET, SO_RCVBUF, (char*)&onb_rbuf, &sock_buf_size);
	LOG(LOG_LEVEL_TRACE, "device av connection socket old SO_RCVBUF %d, want socket SO_RCVBUF %d", onb_rbuf, socket_buffer_size); 

	if(onb_rbuf < socket_buffer_size)
	{
		setsockopt(sock, SOL_SOCKET, SO_RCVBUF, (char*)&nb_rbuf, sock_buf_size);

		getsockopt(sock, SOL_SOCKET, SO_RCVBUF, (char*)&onb_rbuf, &sock_buf_size);
		LOG(LOG_LEVEL_TRACE, "device av connection new SO_RCVBUF %d", onb_rbuf);
	}
}

void on_dev_av_connect(void* tcp_client, GSS_DATA_HEADER* cmd_header)
{
	GSS_DEVICE_AV_LOGIN_CMD* cmd = (GSS_DEVICE_AV_LOGIN_CMD*)(cmd_header+1);
	dev_av_conn* av_conn ;
	int result;
	struct timeval tv = {GSS_HEART_SPAN*2, 0}; 

	cmd->index = ntohl(cmd->index);

	av_conn = (dev_av_conn*)gss_malloc(sizeof(dev_av_conn));

	av_conn->tcp_conn = tcp_client;

	strcpy(av_conn->uid, cmd->uid);
	
	av_conn->client_conn = NULL;

	av_conn->last_recv_tm = g_now_time;

	//add heart timer, libevent common timer
	av_conn->heart_timer = event_new(g_ev_base, -1, EV_TIMEOUT|EV_PERSIST, dev_av_conn_heart_timer, av_conn);
	evtimer_add(av_conn->heart_timer, &tv);

	dev_av_set_sock_opt(av_conn);

	//change tcp callback function
	tcp_client_set_cb(tcp_client, dev_av_conn_on_recv, dev_av_conn_on_close, av_conn);

	tcp_client_set_recvbuf_ratio(tcp_client, GSS_RECVBUF_RATIO);

	result = client_av_conn_dev_connected(cmd->uid, cmd->index, av_conn, &av_conn->client_conn);

	dev_av_send_connect_result(av_conn, result);

	LOG(LOG_LEVEL_TRACE, "on_dev_av_connect,uid %s, index %d, connection %p, result %d", cmd->uid, cmd->index, av_conn, result); 
}