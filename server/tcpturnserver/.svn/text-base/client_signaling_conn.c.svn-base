#include "client_signaling_conn.h"
#include "tcp_client.h"
#include "dev_main_conn.h"
#include "gss_mem.h"
#include "log.h"
#include "flow_stat.h"
#include <time.h>

extern time_t g_now_time;
extern struct event_base* g_ev_base;
extern struct flow_stat g_recv_flow_stat; //statistics receive net flow stat
extern struct flow_stat g_send_flow_stat; //statistics send net flow stat

typedef struct client_signaling_conn 
{
	void* tcp_conn;//client tcp connection

	unsigned short index; //index in struct client_conn_tailq

	struct dev_main_conn* dev_conn; //strcut dev_main_conn

	//heart timer event
	struct event* heart_timer; 

	//last receive data time
	time_t last_recv_tm; 

}client_signaling_conn;

void client_signaling_conn_send(struct client_signaling_conn* client_conn, const char* buf, int buf_len)
{
	if(!client_conn)
		return;
	tcp_client_stat_send(client_conn->tcp_conn, buf, buf_len);
}

void client_signaling_dev_closed(struct client_signaling_conn* client_conn)
{
	GSS_DATA_HEADER header;

	if(!client_conn)
		return;

	client_conn->dev_conn = NULL;
	client_conn->index = -1;

	//send device disconnect to client
	header.cmd = GSS_MAIN_DISCONNECTED;
	header.data_seq = LAST_DATA_SEQ;
	header.len = 0;
	tcp_client_stat_send(client_conn->tcp_conn, (char*)&header, sizeof(GSS_DATA_HEADER));
}

//call back receive client signaling command
static int signaling_conn_on_recv(void* client, const char* buf, int buf_len)
{
	client_signaling_conn* conn = (client_signaling_conn*)tcp_client_user_data(client);
	GSS_DATA_HEADER* header = (GSS_DATA_HEADER*)buf;

	conn->last_recv_tm = g_now_time;
	flow_stat_add(&g_recv_flow_stat, buf_len);

	if(header->cmd == GSS_SIGNALING_DATA)//forward data to device main connection
	{
		if(conn->dev_conn)
			dev_main_conn_send(conn->dev_conn, buf, buf_len);
	}
	else if(header->cmd == GSS_HEART_CMD)
	{
		tcp_client_stat_send(conn->tcp_conn, buf, buf_len); //response heart
	}
	return 0;
}

inline void destroy_signaling_conn(client_signaling_conn* conn)
{
	if(conn->dev_conn)
		main_conn_signaling_close(conn->dev_conn, conn, conn->index);

	destroy_tcp_client(conn->tcp_conn);

	event_free(conn->heart_timer);

	gss_free(conn);
}
//call back tcp closed
static void signaling_conn_on_close(void* client)
{
	client_signaling_conn* conn = (client_signaling_conn*)tcp_client_user_data(client);
	LOG(LOG_LEVEL_TRACE, "signaling_conn_on_close %d %p", conn->index, conn); 
	destroy_signaling_conn(conn);
}

static inline void send_connect_result_to_client(client_signaling_conn* signaling_conn, int result)
{
#define RESULT_CMD_LEN (sizeof(GSS_DATA_HEADER) + sizeof(GSS_SIGNALING_CONNECT_RESULT_CMD))
	char buf[RESULT_CMD_LEN];
	GSS_DATA_HEADER* header = (GSS_DATA_HEADER*)buf;
	GSS_SIGNALING_CONNECT_RESULT_CMD* conn_result = (GSS_SIGNALING_CONNECT_RESULT_CMD*)(header+1);

	header->cmd = GSS_CONNECT_RESULT;
	header->data_seq = LAST_DATA_SEQ;
	header->len = htons(sizeof(GSS_SIGNALING_CONNECT_RESULT_CMD));
	
	conn_result->result = htonl(result);
	conn_result->index = htons(signaling_conn->index);
	tcp_client_stat_send(signaling_conn->tcp_conn, buf, RESULT_CMD_LEN);
}

static void signaling_conn_heart_timer(evutil_socket_t fd, short events, void *arg)
{
	client_signaling_conn* conn = (client_signaling_conn*)arg;
	if(g_now_time - conn->last_recv_tm >= GSS_HEART_SPAN*2)
	{
		LOG(LOG_LEVEL_TRACE, "signaling_conn_heart_timer %d %p", conn->index, conn); 
		destroy_signaling_conn(conn);
	}
}

void on_signaling_connect(void* tcp_client, GSS_DATA_HEADER* cmd_header)
{
	GSS_LOGIN_CMD* cmd = (GSS_LOGIN_CMD*)(cmd_header+1);
	client_signaling_conn* signaling_conn ;
	int result;
	struct timeval tv = {GSS_HEART_SPAN*2, 0}; 

	signaling_conn = (client_signaling_conn*)gss_malloc(sizeof(client_signaling_conn));

	signaling_conn->tcp_conn = tcp_client;
	signaling_conn->dev_conn = NULL;
	signaling_conn->index = -1;

	signaling_conn->last_recv_tm = g_now_time;
	//add heart timer, libevent common timer
	signaling_conn->heart_timer = event_new(g_ev_base, -1, EV_TIMEOUT|EV_PERSIST, signaling_conn_heart_timer, signaling_conn);
	evtimer_add(signaling_conn->heart_timer, &tv);

	//change tcp callback function
	tcp_client_set_cb(tcp_client, signaling_conn_on_recv, signaling_conn_on_close, signaling_conn);

	result = main_conn_signaling_connect(cmd->uid, 
		signaling_conn, 
		&signaling_conn->dev_conn, 
		&signaling_conn->index);

	send_connect_result_to_client(signaling_conn, result);

	LOG(LOG_LEVEL_TRACE, "on_signaling_connect,uid %s index %d,conn %p,result %d",
		cmd->uid, signaling_conn->index, signaling_conn, result); 
}