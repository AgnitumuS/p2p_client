#include "dev_push_conn.h"
#include "tcp_client.h"
#include "ht-internal.h"
#include "gss_mem.h"
#include "log.h"
#include "queue.h"
#include "client_pull_conn.h"
#include "shared_cmd.h"
#include "gss_setting.h"
#include "rtmp_pusher.h"
#include "flow_stat.h"

//device push tcp connection
typedef struct dev_push_conn{
	HT_ENTRY(dev_push_conn) hash_node;
	unsigned hash_val; //cache hash value 

	void* tcp_conn;//device tcp connection

	char* uid; //device uid

	//heart timer event
	struct event* heart_timer; 

	//last receive data time
	time_t last_recv_tm; 

	//kick out by same uid device
	char is_kickout;

	//client pull connections
	TAILQ_HEAD(pull_tailq_entrys, client_pull_conn) pull_conns;

	//GOP cache
	struct shared_cmd_tailq_list gop_cache;
	char enable_gop_cache;	
	//previous key video sequence number
	unsigned char prev_key_video_seq; 

	//rtmp pusher object
	struct rtmp_pusher* rtmp;

}dev_push_conn;

extern time_t g_now_time;
extern struct event_base* g_ev_base;
extern struct flow_stat g_recv_flow_stat; //statistics receive net flow stat
extern struct flow_stat g_send_flow_stat; //statistics send net flow stat

static inline unsigned dev_push_hash_fn(struct dev_push_conn *c)
{
	return c->hash_val; 
}

static inline int dev_push_eq(struct dev_push_conn *c1, struct dev_push_conn *c2)
{
	return strcmp(c1->uid, c2->uid)==0; 
}

HT_HEAD(push_conn_entrys, dev_push_conn);
HT_PROTOTYPE(push_conn_entrys, dev_push_conn, hash_node, dev_push_hash_fn, dev_push_eq)
HT_GENERATE(push_conn_entrys, dev_push_conn, hash_node, dev_push_hash_fn, dev_push_eq, 0.5, gss_malloc, gss_realloc, gss_free)

//all device push tcp connections
typedef struct dev_push_conn_entries{
	//device push connections
	struct push_conn_entrys hash_entrys;

	//client pull count
	unsigned int total_pull_count;
}dev_push_conn_entries;

dev_push_conn_entries g_push_conn_entries={HT_INITIALIZER(), 0}; 

inline char is_key_video_frame(dev_push_conn* conn, GSS_DATA_HEADER* header)
{
	if(header->cmd == GSS_PUSH_KEY_VIDEO)
	{
		if(conn->prev_key_video_seq == LAST_DATA_SEQ)
		{	
			conn->prev_key_video_seq = header->data_seq;
			return 1;
		}
		conn->prev_key_video_seq = header->data_seq;
	}
	return 0;
}

static void push_conn_update_gop(dev_push_conn* conn, shared_cmd* sc, char is_key_video) 
{
	GSS_DATA_HEADER* header = (GSS_DATA_HEADER*)sc->cmd;
	shared_cmd_tailq* sc_tailq;
	shared_cmd_tailq* next_tailq;

	if(!conn->enable_gop_cache)
		return;

	//first gop cache frame muse be key video frame
	if(TAILQ_EMPTY(&conn->gop_cache))
	{
		if(!is_key_video)
			return;
	}
	else
	{
		//if receive key video frame, than clear all gop cache
		if(is_key_video)
		{
			sc_tailq = TAILQ_FIRST(&conn->gop_cache);
			while(sc_tailq != TAILQ_END(&conn->gop_cache))
			{
				next_tailq = TAILQ_NEXT(sc_tailq, tailq);

				shared_cmd_release(sc_tailq->sc);
				free_shared_cmd_tailq(sc_tailq);

				sc_tailq = next_tailq;
			}
			TAILQ_INIT(&conn->gop_cache);
		}
	}
	
	shared_cmd_add_ref(sc);
	sc_tailq = malloc_shared_cmd_tailq(sc);
	TAILQ_INSERT_TAIL(&conn->gop_cache, sc_tailq, tailq);
}

//call back receive device command
static int push_conn_on_recv(void* client, const char* buf, int buf_len)
{
	dev_push_conn* conn = (dev_push_conn*)tcp_client_user_data(client);
	GSS_DATA_HEADER* header = (GSS_DATA_HEADER*)buf;

	conn->last_recv_tm = g_now_time;
	flow_stat_add(&g_recv_flow_stat, buf_len);

	if(header->cmd == GSS_PUSH_KEY_VIDEO || header->cmd == GSS_PUSH_VIDEO || header->cmd == GSS_PUSH_AUDIO)
	{
		shared_cmd* sc;
		client_pull_conn* pull_conn;

		char is_key_video;

		//gop disable and no pull connections and no rtmp push
		if(!conn->enable_gop_cache && TAILQ_EMPTY(&conn->pull_conns) && !conn->rtmp)
			return 0;

		is_key_video = is_key_video_frame(conn, header);

		sc = malloc_shared_cmd(buf, buf_len);
		push_conn_update_gop(conn, sc, is_key_video);

		TAILQ_FOREACH(pull_conn, &conn->pull_conns, tailq)
			pull_conn_on_recv_av(pull_conn, sc);

		if(conn->rtmp)
			rtmp_pusher_on_data(conn->rtmp, sc, is_key_video);
	}
	else if(header->cmd == GSS_PUSH_RTMP)
	{
		if(conn->rtmp == NULL)
		{
			conn->rtmp = create_rtmp_pusher(conn->uid, conn->hash_val, conn, header, buf_len);
		}
	}
	else if(header->cmd == GSS_HEART_CMD)
	{
		tcp_client_stat_send(conn->tcp_conn, buf, buf_len); //response heart
	}
	return 0;
}

inline void destroy_push_conn(dev_push_conn* conn)
{
	shared_cmd_tailq* sc_tailq;
	client_pull_conn* pull_conn;
	shared_cmd_tailq* next_tailq;

	TAILQ_FOREACH(pull_conn, &conn->pull_conns, tailq)
		pull_conn_on_push_closed(pull_conn);

	destroy_tcp_client(conn->tcp_conn);

	if(conn->is_kickout == 0)
		HT_REMOVE(push_conn_entrys, &g_push_conn_entries.hash_entrys, conn);

	event_free(conn->heart_timer);

	sc_tailq = TAILQ_FIRST(&conn->gop_cache);
	while(sc_tailq != TAILQ_END(&conn->gop_cache))
	{
		next_tailq = TAILQ_NEXT(sc_tailq, tailq);

		shared_cmd_release(sc_tailq->sc);
		free_shared_cmd_tailq(sc_tailq);

		sc_tailq = next_tailq;
	}

	if(conn->rtmp)
		destory_rtmp_pusher(conn->rtmp);

	gss_free(conn->uid);
	gss_free(conn);
}

//call back tcp closed
static void push_conn_on_close(void* client)
{
	dev_push_conn* conn = (dev_push_conn*)tcp_client_user_data(client);

	LOG(LOG_LEVEL_TRACE, "push_conn_on_close %s %p", conn->uid, conn);

	destroy_push_conn(conn);
}

static void push_conn_heart_timer(evutil_socket_t fd, short events, void *arg)
{
	dev_push_conn* conn = (dev_push_conn*)arg;
	if(g_now_time - conn->last_recv_tm >= GSS_HEART_SPAN*2)
	{
		LOG(LOG_LEVEL_TRACE, "push_conn_heart_timer %s %p", conn->uid, conn);
		destroy_push_conn(conn);
	}
}

static void dev_push_kickout(char* uid, unsigned hash_val)
{
	dev_push_conn* dev_conn = NULL;
	dev_push_conn conn;

	//find device connection by uid
	conn.uid = (char*)uid;
	conn.hash_val = hash_val;	
	dev_conn = HT_FIND(push_conn_entrys, &g_push_conn_entries.hash_entrys, &conn);
	if(dev_conn)
	{
		GSS_DATA_HEADER header;
		
		LOG(LOG_LEVEL_WARN, "dev_push_kickout %s %p", dev_conn->uid, dev_conn);

		header.cmd = GSS_KICKOUT;
		header.data_seq = LAST_DATA_SEQ;
		header.len = 0;

		tcp_client_stat_send(dev_conn->tcp_conn, (const char*)&header, sizeof(GSS_DATA_HEADER));

		dev_conn->is_kickout = 1;
		HT_REMOVE(push_conn_entrys, &g_push_conn_entries.hash_entrys, dev_conn);
	} 
}

static inline void push_send_connect_result(dev_push_conn* conn, int result)
{
#define RESULT_CMD_LEN (sizeof(GSS_DATA_HEADER) + sizeof(int))
	char buf[RESULT_CMD_LEN];
	GSS_DATA_HEADER* header = (GSS_DATA_HEADER*)buf;

	header->cmd = GSS_CONNECT_RESULT;
	header->data_seq = LAST_DATA_SEQ;
	header->len = htons(sizeof(int));

	*(int*)(header+1) = htonl(result);

	tcp_client_stat_send(conn->tcp_conn, buf, RESULT_CMD_LEN);
}

static void dev_push_set_sock_opt(dev_push_conn* dev_push)
{
	evutil_socket_t sock = tcp_client_get_handle(dev_push->tcp_conn);
	int socket_buffer_size = get_gss_setting()->so_recvbuf;

	// socket receive buffer, system will double it.
	int nb_rbuf = socket_buffer_size / 2;

	int onb_rbuf = 0;
#ifdef WIN32
	int sock_buf_size = sizeof(int);
#else
	socklen_t sock_buf_size = sizeof(int);
#endif

	if(get_gss_setting()->so_recvbuf < 0)
		return;

	getsockopt(sock, SOL_SOCKET, SO_RCVBUF, (char*)&onb_rbuf, &sock_buf_size);
	LOG(LOG_LEVEL_TRACE, "device push connection socket old SO_RCVBUF %d, want socket SO_RCVBUF %d", onb_rbuf, socket_buffer_size); 

	if(onb_rbuf < socket_buffer_size)
	{
		setsockopt(sock, SOL_SOCKET, SO_RCVBUF, (char*)&nb_rbuf, sock_buf_size);

		getsockopt(sock, SOL_SOCKET, SO_RCVBUF, (char*)&onb_rbuf, &sock_buf_size);
		LOG(LOG_LEVEL_TRACE, "device push connection new SO_RCVBUF %d", onb_rbuf);
	}
}


void on_dev_push_connect(void* tcp_client, GSS_DATA_HEADER* cmd_header)
{
	dev_push_conn* conn;
	GSS_LOGIN_CMD* cmd = (GSS_LOGIN_CMD*)(cmd_header+1);
	struct timeval tv = {GSS_HEART_SPAN*2, 0}; 
	unsigned hash_val;

	hash_val = ht_string_hash(cmd->uid);

	//kickout same uid device
	dev_push_kickout(cmd->uid, hash_val);

	conn = (dev_push_conn*)gss_malloc(sizeof(dev_push_conn));

	conn->is_kickout = 0;

	conn->last_recv_tm = g_now_time;
	//add heart timer, libevent common timer
	conn->heart_timer = event_new(g_ev_base, -1, EV_TIMEOUT|EV_PERSIST, push_conn_heart_timer, conn);
	evtimer_add(conn->heart_timer, &tv);

	conn->tcp_conn = tcp_client;
	conn->uid = (char*)gss_malloc(MAX_UID_LEN);
	
	conn->rtmp = NULL;
	conn->prev_key_video_seq = LAST_DATA_SEQ;

	strcpy(conn->uid, cmd->uid);
	conn->hash_val = hash_val;

	TAILQ_INIT(&conn->pull_conns);
	TAILQ_INIT(&conn->gop_cache);

	conn->enable_gop_cache = get_gss_setting()->enable_gop_cache;
	
	HT_INSERT(push_conn_entrys, &g_push_conn_entries.hash_entrys, conn);

	dev_push_set_sock_opt(conn);

	tcp_client_set_recvbuf_ratio(tcp_client, GSS_RECVBUF_RATIO);

	//change tcp callback function
	tcp_client_set_cb(tcp_client, push_conn_on_recv, push_conn_on_close, conn); 

	push_send_connect_result(conn, GSS_NO_ERROR);

	LOG(LOG_LEVEL_TRACE, "on_dev_push_connect %s %p", conn->uid, conn); 
}


void dev_push_conn_pull_closed(struct dev_push_conn* push_conn, struct client_pull_conn* pull_conn)
{	
	TAILQ_REMOVE(&push_conn->pull_conns, pull_conn, tailq);
	g_push_conn_entries.total_pull_count--;
}	

int dev_push_conn_pull_connect(char* uid, struct client_pull_conn* pull_conn)
{
	dev_push_conn* dev_conn = NULL;
	dev_push_conn conn;
	shared_cmd_tailq* sc_tailq;

	//find device connection by uid
	conn.uid = (char*)uid;
	conn.hash_val = ht_string_hash(conn.uid);	
	dev_conn = HT_FIND(push_conn_entrys, &g_push_conn_entries.hash_entrys, &conn);
	if(!dev_conn)
		return GSS_DEVICE_OFFLINE;

	pull_conn->push_conn = dev_conn;

	//copy gop cache to pull connection
	TAILQ_FOREACH(sc_tailq, &dev_conn->gop_cache, tailq)
	{
		shared_cmd_tailq* new_sc_tailq;
		shared_cmd_add_ref(sc_tailq->sc);		
		new_sc_tailq = malloc_shared_cmd_tailq(sc_tailq->sc);
		TAILQ_INSERT_TAIL(&pull_conn->av_cmd, new_sc_tailq, tailq);
	}

	//add to pull connections
	TAILQ_INSERT_TAIL(&dev_conn->pull_conns, pull_conn, tailq);

	g_push_conn_entries.total_pull_count++;

	return GSS_NO_ERROR;
}

static void send_rtmp_connect_result(dev_push_conn* dev_conn, int result)
{
#define RESULT_CMD_LEN (sizeof(GSS_DATA_HEADER) + sizeof(int))
	char buf[RESULT_CMD_LEN];
	GSS_DATA_HEADER* header = (GSS_DATA_HEADER*)buf;

	header->cmd = GSS_RTMP_CONNECT_RESULT;
	header->data_seq = LAST_DATA_SEQ;
	header->len = htons(sizeof(int));

	*(int*)(header+1) = htonl(result);

	tcp_client_stat_send(dev_conn->tcp_conn, buf, RESULT_CMD_LEN);
}
void on_rtmp_push_event(evutil_socket_t fd, short events, void *arg)
{
	async_rtmp_notice* notice = (async_rtmp_notice*)arg;
	dev_push_conn conn;
	dev_push_conn* dev_conn = NULL;

	//find device connection by uid
	conn.uid = (char*)notice->uid;
	conn.hash_val = notice->uid_hash_val;
	dev_conn = HT_FIND(push_conn_entrys, &g_push_conn_entries.hash_entrys, &conn);
	if(!dev_conn || dev_conn != notice->push_conn)
	{
		gss_free(notice);
		return;
	}

	switch(notice->event)
	{
	case RTMP_CONNECT_SUCCESS:
		send_rtmp_connect_result(dev_conn, 0);
		break;
	case RTMP_CONNECT_FAIL:
		{
			send_rtmp_connect_result(dev_conn, notice->err_code);

			destory_rtmp_pusher(dev_conn->rtmp);
			dev_conn->rtmp = NULL;
		}
		break;
	case RTMP_DISCONNECT:
		{
			GSS_DATA_HEADER header;
			header.cmd = GSS_RTMP_DISCONNECT;
			header.data_seq = LAST_DATA_SEQ;
			header.len = 0;
			tcp_client_stat_send(dev_conn->tcp_conn, (const char*)&header, sizeof(GSS_DATA_HEADER));

			destory_rtmp_pusher(dev_conn->rtmp);
			dev_conn->rtmp = NULL;
		}
		break;
	}

	gss_free(notice);
}

void get_dev_push_count(unsigned int* push_count, unsigned int* pull_count)
{
	*pull_count = g_push_conn_entries.total_pull_count;
	*push_count = g_push_conn_entries.hash_entrys.hth_n_entries;
}