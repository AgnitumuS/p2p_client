#include "unknown_tcp.h"
#include "queue.h"
#include "gss_mem.h"
#include "tcp_client.h"
#include "gss_setting.h"
#include "log.h"
#include "dev_main_conn.h"
#include "client_signaling_conn.h"
#include "client_av_conn.h"
#include "dev_av_conn.h"
#include "dev_push_conn.h"
#include "client_pull_conn.h"

extern struct event_base* g_ev_base;
extern time_t g_now_time;

typedef struct unknown_tcp_entry { 
	LIST_ENTRY(unknown_tcp_entry) next;
	void* client;
	time_t begin_tm;
}unknown_tcp_entry;

typedef struct unknown_tcp{
	LIST_HEAD(unknown_tcp_entrys, unknown_tcp_entry) client_entries;
	unsigned int client_count;
	struct event* timeout_ev;
	time_t period_tm;
	int period_count;
}unknown_tcp;

static unknown_tcp unknown_tcp_entries = {LIST_HEAD_INITIALIZER(unknown_tcp_entries.client_entries), 0, NULL, 0, 0};

inline static void remove_unknown_tcp(unknown_tcp_entry* entry)
{
	LIST_REMOVE(entry, next);
	gss_free(entry);

	unknown_tcp_entries.client_count--;
}

inline static void destroy_unknown_tcp(unknown_tcp_entry* entry)
{
	destroy_tcp_client(entry->client);
	remove_unknown_tcp(entry);
}

//if tcp client no send any command in get_gss_setting()->unknown_tcp_timeout second
//remove tcp client 
static void unknown_tcp_timer(evutil_socket_t fd, short events, void *arg)
{
	unknown_tcp_entry* entry;
	for(entry = LIST_FIRST(&unknown_tcp_entries.client_entries); entry!= LIST_END(&unknown_tcp_entries.client_entries); )
	{
		if((g_now_time - entry->begin_tm) > get_gss_setting()->unknown_tcp_timeout)
		{
			char addr_str[MAX_IP_ADDR_LEN]={0};
			unknown_tcp_entry* next = entry->next.le_next;

			print_tcp_client_peer_addr(entry->client, addr_str);
			LOG(LOG_LEVEL_WARN, "unknown_tcp_timer %s", addr_str);

			destroy_unknown_tcp(entry);
			entry = next;
		}
		else
			entry = LIST_NEXT(entry, next);
	}
}

void init_unknown_tcp()
{
	struct timeval tv = {get_gss_setting()->unknown_tcp_timeout, 0}; 

	LIST_INIT(&unknown_tcp_entries.client_entries);
	unknown_tcp_entries.client_count = 0;
	unknown_tcp_entries.period_count = 0;
	unknown_tcp_entries.period_tm = g_now_time;
	unknown_tcp_entries.timeout_ev = event_new(g_ev_base, -1, EV_TIMEOUT|EV_PERSIST, unknown_tcp_timer , NULL);
	evtimer_add(unknown_tcp_entries.timeout_ev, &tv);
}

void uninit_unknown_tcp()
{
	unknown_tcp_entry* entry;
	LIST_FOREACH(entry, &unknown_tcp_entries.client_entries, next)
		destroy_tcp_client(entry->client);

	if(unknown_tcp_entries.timeout_ev)
		event_free(unknown_tcp_entries.timeout_ev);
}

//call back receive first tcp command
static int unknown_tcp_on_recv(void* client, const char* buf, int buf_len)
{
	unknown_tcp_entry* entry = (unknown_tcp_entry*)tcp_client_user_data(client);
	GSS_DATA_HEADER* header = (GSS_DATA_HEADER*)buf;
	switch(header->cmd)
	{
	case GSS_DEV_LOGIN_CMD:
		{
			on_dev_connect(client, header);
			remove_unknown_tcp(entry);
		}
		break;
	case GSS_CLIENT_LOGIN_CMD:
		{
			on_signaling_connect(client, header);
			remove_unknown_tcp(entry);
		}
		break;
	case GSS_CLIENT_AV_LOGIN_CMD:
		{
			on_client_av_connect(client, header);
			remove_unknown_tcp(entry);
		}
		break;
	case GSS_DEV_AV_LOGIN_CMD:
		{
			on_dev_av_connect(client, header);
			remove_unknown_tcp(entry);
		}
		break;
	case GSS_DEV_PUSH_LOGIN_CMD:
		{
			on_dev_push_connect(client, header);
			remove_unknown_tcp(entry);
		}
		break;
	case GSS_CLIENT_PULL_LOGIN_CMD:
		{
			on_client_pull_connect(client, header);
			remove_unknown_tcp(entry);
		}
		break;
	default:
		{
			char addr_str[MAX_IP_ADDR_LEN]={0};
			print_tcp_client_peer_addr(client, addr_str);
			destroy_unknown_tcp(entry);
			LOG(LOG_LEVEL_WARN, "receive invalid command code, %s", addr_str); 
		}
		break;
	}

	return 0;
}

//call back tcp closed, no receive any tcp command
static void unknown_tcp_on_close(void* client)
{
	char addr_str[MAX_IP_ADDR_LEN]={0};
	unknown_tcp_entry* entry = (unknown_tcp_entry*)tcp_client_user_data(client);

	print_tcp_client_peer_addr(client, addr_str);
	LOG(LOG_LEVEL_WARN, "unknown_tcp_on_close %s", addr_str); 
	remove_unknown_tcp(entry);
}

void on_tcp_accept(void* listener, evutil_socket_t fd)
{
	unknown_tcp_entry* entry;

	//limit accept tcp count in one second
	if(g_now_time == unknown_tcp_entries.period_tm)
	{
		unknown_tcp_entries.period_count++;
		if(unknown_tcp_entries.period_count > get_gss_setting()->accept_period_limit)
		{
			LOG(LOG_LEVEL_WARN, "accept too many tcp connection!!!"); 
			evutil_closesocket(fd);
			return;
		}
	}
	else
	{
		unknown_tcp_entries.period_tm = g_now_time;
		unknown_tcp_entries.period_count = 0; 
	}

	entry = (unknown_tcp_entry*)gss_malloc(sizeof(unknown_tcp_entry));
	entry->client = create_tcp_client(fd, g_ev_base, unknown_tcp_on_recv, unknown_tcp_on_close, entry, 1);
	entry->begin_tm = g_now_time;

	LIST_INSERT_HEAD(&unknown_tcp_entries.client_entries, entry, next);
	unknown_tcp_entries.client_count++;
}
