#include "rtmp_pusher.h"
#include "dev_push_conn.h"
#include "srs_librtmp.h"
#include <pthread.h>
#include <semaphore.h>
#include "gss_mem.h"
#include "shared_cmd.h"
#include "log.h"
#include "queue.h"
#ifndef WIN32
#include <signal.h>
#endif

typedef struct rtmp_pusher
{
	unsigned uid_hash_val;
	struct dev_push_conn* push_conn;
	char uid[MAX_UID_LEN];

	//rtmp url
	char* url;

	//srs lib rtmp object
	srs_rtmp_t rtmp;

	pthread_t thread;

	pthread_mutex_t mutex;
	sem_t sem;

	char is_run;

	//reference count
	unsigned int ref;

	//cache audio and video data 
	struct shared_cmd_tailq_list data_list;

	char* frame;
	unsigned int frame_len;
	unsigned int frame_capacity;

	unsigned int begin_stamp;

	//before got first key video frame. give up all other frame
	char first_key_video;
}rtmp_pusher;

extern struct event_base* g_ev_base;

static void async_notify_dev_push_conn(struct rtmp_pusher* pusher, int event, int err_code)
{
	async_rtmp_notice* notice = (async_rtmp_notice*)gss_malloc(sizeof(async_rtmp_notice));

	notice->uid_hash_val = pusher->uid_hash_val;
	strcpy(notice->uid, pusher->uid);
	notice->push_conn = pusher->push_conn;
	notice->event = event;
	notice->err_code = err_code;

	event_base_once(g_ev_base, -1, EV_TIMEOUT, on_rtmp_push_event, notice, NULL);
}

static void release_rtmp_pusher(struct rtmp_pusher* pusher)
{
	unsigned int ref;
	pthread_mutex_lock(&pusher->mutex);
	ref = --pusher->ref;
	pthread_mutex_unlock(&pusher->mutex);

	if(ref == 0)
	{
		shared_cmd_tailq* sc_tailq;
		shared_cmd_tailq* next_tailq;

		LOG(LOG_LEVEL_INFO, "release_rtmp_pusher ref == 0");

		sc_tailq = TAILQ_FIRST(&pusher->data_list);
		while(sc_tailq != TAILQ_END(&pusher->data_list))
		{
			next_tailq = TAILQ_NEXT(sc_tailq, tailq);

			shared_cmd_release(sc_tailq->sc);
			free_shared_cmd_tailq(sc_tailq);

			sc_tailq = next_tailq;
		}

		gss_free(pusher->url);
		sem_destroy(&pusher->sem);
		pthread_mutex_destroy(&pusher->mutex);
		gss_free(pusher);
	}
}

static int send_shared_cmd_to_rtmp(rtmp_pusher* pusher, shared_cmd* sc)
{
	GSS_DATA_HEADER* header;
	unsigned int data_len;
	unsigned int capacity;
	unsigned char cmd_code ;
	unsigned int time_stamp;
	unsigned char data_seq;
	unsigned char* av_data;

	if(sc->time_stamp < pusher->begin_stamp)
	{
		shared_cmd_release(sc);
		return 0;
	}

	header = (GSS_DATA_HEADER*)(sc->cmd);
	//video or audio real length, sizeof(unsigned int) is time stamp length 
	data_len = sc->cmd_len-sizeof(GSS_DATA_HEADER)-sizeof(unsigned int);
	capacity = pusher->frame_len + data_len;
	cmd_code = header->cmd;
	data_seq = header->data_seq;
	av_data = (unsigned char*)sc->cmd+sizeof(GSS_DATA_HEADER)+sizeof(unsigned int);

	time_stamp = sc->time_stamp - pusher->begin_stamp;

	//LOG(LOG_LEVEL_DEBUG, "send_shared_cmd_to_rtmp data_len %d,data_seq %d,frame_len %d,nut %d", data_len, data_seq, pusher->frame_len, av_data[4]);

	//realloc frame memory
	if(capacity > pusher->frame_capacity)
	{
		unsigned int frame_capacity = pusher->frame_capacity;

		frame_capacity *= 2;
		while(frame_capacity < capacity)
			frame_capacity *= 2;
		if(frame_capacity > MAX_AV_FRAME_LEN)
			return GSS_FRAME_TOO_LONG;

		pusher->frame_capacity = frame_capacity;
		pusher->frame = (char*)gss_realloc(pusher->frame, frame_capacity);
	}
	

	//copy and merge frame
	memcpy(pusher->frame+pusher->frame_len, av_data, data_len);
	pusher->frame_len += data_len;
	shared_cmd_release(sc);	 

	if(data_seq == LAST_DATA_SEQ)
	{
		if(cmd_code == GSS_PUSH_KEY_VIDEO || cmd_code == GSS_PUSH_VIDEO)
		{
			int ret = srs_h264_write_raw_frames(pusher->rtmp, pusher->frame, pusher->frame_len, time_stamp, time_stamp);
			pusher->frame_len = 0;
			if (ret != 0) {
				if (srs_h264_is_dvbsp_error(ret)) {
					LOG(LOG_LEVEL_DEBUG, "srs_h264_write_raw_frames ignore drop video error, code=%d", ret);
				} else if (srs_h264_is_duplicated_sps_error(ret)) {
					LOG(LOG_LEVEL_DEBUG, "srs_h264_write_raw_frames ignore duplicated sps, code=%d", ret);
				} else if (srs_h264_is_duplicated_pps_error(ret)) {
					LOG(LOG_LEVEL_DEBUG, "srs_h264_write_raw_frames ignore duplicated pps, code=%d", ret);
				} else {
					LOG(LOG_LEVEL_ERROR, "srs_h264_write_raw_frames send h264 raw data failed. ret=%d", ret);
					return GSS_BASE_ERROR + ret;
				}
			}
		}
		else
		{
			// 10 = AAC
			char sound_format = 10;
			// 3 = 44 kHz
			char sound_rate = 3;
			// 1 = 16-bit samples
			char sound_size = 1;
			// 1 = Stereo sound
			char sound_type = 1;

			int ret = srs_audio_write_raw_frame(pusher->rtmp, sound_format, sound_rate, sound_size, sound_type, pusher->frame, pusher->frame_len, time_stamp);
			pusher->frame_len = 0;
			if (ret != 0) 
			{
				LOG(LOG_LEVEL_ERROR, "srs_audio_write_raw_frame send acc data failed. ret=%d", ret);
				return GSS_BASE_ERROR + ret;
			}
		}
	}

	return 0;
}

static void* pusher_thread(void *arg)
{	
	rtmp_pusher* pusher = (rtmp_pusher*)arg;
	srs_rtmp_t rtmp;
	int connect_result  = 0;
	shared_cmd_tailq* sc_tailq;
	shared_cmd* sc;

#ifndef WIN32
	signal(SIGPIPE, SIG_IGN); //gdb handle SIGPIPE nostop noprint
#endif

	rtmp = srs_rtmp_create(pusher->url);
	
	//connect rtmp server
	do 
	{
		connect_result = srs_rtmp_handshake(rtmp);
		if (connect_result != 0) 
		{
			LOG(LOG_LEVEL_ERROR, "srs_rtmp_handshake return %d %s", connect_result, pusher->url);  
			break;
		}

		connect_result = srs_rtmp_connect_app(rtmp);
		if (connect_result != 0) 
		{			
			LOG(LOG_LEVEL_ERROR, "srs_rtmp_connect_app return %d %s", connect_result, pusher->url); 
			break;
		}

		connect_result = srs_rtmp_publish_stream(rtmp);
		if (connect_result != 0)
		{
			LOG(LOG_LEVEL_ERROR, "srs_rtmp_publish_stream return %d %s", connect_result, pusher->url); 
			break;
		}
	} while (0);

	//failed to connect rtmp server
	if(connect_result != 0)
	{
		//notify main thread rtmp connect result
		async_notify_dev_push_conn(pusher, RTMP_CONNECT_FAIL, connect_result);

		srs_rtmp_destroy(rtmp);
		pthread_detach(pusher->thread);
		release_rtmp_pusher(pusher);
		return 0;
	}

	//notify main thread rtmp connect result
	async_notify_dev_push_conn(pusher, RTMP_CONNECT_SUCCESS, 0);
	pusher->rtmp = rtmp;

	LOG(LOG_LEVEL_PROMPT, "%s, publish rtmp stream success", pusher->url); 
	while(pusher->is_run)
	{
		sem_wait(&pusher->sem);

		sc = NULL;
		pthread_mutex_lock(&pusher->mutex);
		sc_tailq = TAILQ_FIRST(&pusher->data_list);
		if(sc_tailq)
		{
			sc = sc_tailq->sc;
			TAILQ_REMOVE(&pusher->data_list, sc_tailq, tailq);
		}
		pthread_mutex_unlock(&pusher->mutex);

		if(sc_tailq)
			free_shared_cmd_tailq(sc_tailq);

		if(sc)
		{
			int ret;
			ret = send_shared_cmd_to_rtmp(pusher, sc);
			if(ret != 0)
			{
				async_notify_dev_push_conn(pusher, RTMP_DISCONNECT, ret);
				break;
			}
		}
	}
	
	srs_rtmp_destroy(rtmp);
	pthread_detach(pusher->thread);
	release_rtmp_pusher(pusher);
	return 0;
}

struct rtmp_pusher* create_rtmp_pusher(const char* uid, unsigned uid_hash_val, struct dev_push_conn* push_conn, GSS_DATA_HEADER* header, int data_len)
{
	rtmp_pusher* pusher = (rtmp_pusher*)gss_malloc(sizeof(rtmp_pusher));
	GSS_PUSH_RMTP_CMD* push_cmd = (GSS_PUSH_RMTP_CMD*)(header+1);
	
	pusher->uid_hash_val = uid_hash_val;
	strcpy(pusher->uid, uid);
	pusher->push_conn = push_conn;

	pusher->is_run = 1;
	pusher->rtmp = NULL;

	pusher->frame = (char*)gss_malloc(GSS_MAX_CMD_LEN);
	pusher->frame_len = 0;
	pusher->frame_capacity = GSS_MAX_CMD_LEN;

	pusher->begin_stamp = 0;
	pusher->first_key_video = 0;

	pthread_mutex_init(&pusher->mutex, NULL);
	sem_init(&pusher->sem, 0, 0);

	pusher->url = gss_strdup(push_cmd->url);

	pusher->ref = 2; //pusher thread reference 1 and main thread reference 1

	TAILQ_INIT(&pusher->data_list);

	pthread_create(&pusher->thread, NULL, pusher_thread, pusher);

	return pusher;
}

void destory_rtmp_pusher(struct rtmp_pusher* pusher)
{
	if(!pusher)
		return;

	pusher->is_run = 0;
	sem_post(&pusher->sem); //wake up pusher thread

	release_rtmp_pusher(pusher);
}

void rtmp_pusher_on_data(struct rtmp_pusher* pusher, struct shared_cmd* sc, char is_key_video)
{
	shared_cmd_tailq* sc_tailq;

	if(!pusher || pusher->rtmp == NULL)
		return;

	//first frame must be key video
	if(!pusher->first_key_video)
	{
		if(!is_key_video)
			return;
		pusher->begin_stamp = sc->time_stamp;
		pusher->first_key_video = 1;
	}

	shared_cmd_add_ref(sc); //release in send_shared_cmd_to_rtmp or release_rtmp_pusher
	sc_tailq = malloc_shared_cmd_tailq(sc);

	pthread_mutex_lock(&pusher->mutex);
	TAILQ_INSERT_TAIL(&pusher->data_list, sc_tailq, tailq);
	pthread_mutex_unlock(&pusher->mutex);

	sem_post(&pusher->sem); //wake up pusher thread
}